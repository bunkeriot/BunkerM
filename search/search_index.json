{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BunkerM - Introduction","text":"<p>Welcome to the official documentation for BunkerM, the all-in-one Mosquitto MQTT broker with a comprehensive web UI for easy management.</p> <p></p>"},{"location":"#what-is-bunkerm","title":"What is BunkerM?","text":"<p>BunkerM is an open-source, containerized MQTT management solution that bundles together a Mosquitto broker with a comprehensive web interface. It provides a complete, ready-to-deploy MQTT environment with built-in management capabilities, eliminating the need for separate broker setup and configuration.</p> <p>This all-in-one solution features:</p> <ul> <li>ACL management - Manage client authentication and Role Based Access control</li> <li>Real-time monitoring - Track broker performance and client connections</li> <li>Client activity logging - Monitor MQTT client activity and troubleshoot issues</li> <li>Client Administration - Enable / Disable MQTT client in real time</li> <li>Cloud integration capabilities - Connect to AWS IoT Core and Azure IoT Hub (Pro feature)</li> </ul> <p>The entire stack - Mosquitto broker, backend services, and frontend UI - comes pre-configured in Docker containers for easy deployment and management.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#1-broker-dashboard","title":"1. Broker Dashboard","text":"<p>Monitor and control MQTT client connections in real-time: - Connected clients count - Message statistics - Byte transfer rates - Subscription tracking - Retained message counts</p>"},{"location":"#2-access-control-list-acl-management","title":"2. Access Control List (ACL) Management","text":"<p>Manage your MQTT broker's clients:</p> <ul> <li>Client Management</li> <li>Create new MQTT clients</li> <li>Set client credentials</li> <li>Manage client permissions</li> <li> <p>Group assignments</p> </li> <li> <p>Role Management</p> </li> <li>Create and configure roles</li> <li>Set up ACL rules</li> <li>Define topic permissions</li> <li> <p>Manage access patterns</p> </li> <li> <p>Group Management</p> </li> <li>Create client groups</li> <li>Assign roles to groups</li> <li>Manage group members</li> <li>Set priorities</li> </ul>"},{"location":"#3-cloud-integration-pro-feature","title":"3. Cloud Integration (Pro Feature)","text":"<p>Connect to major cloud providers:</p> <ul> <li>AWS IoT Core Bridge</li> <li>AWS IoT endpoint configuration</li> <li>Certificate management</li> <li>Topic mapping</li> <li> <p>Secure communication</p> </li> <li> <p>Azure IoT Hub Bridge</p> </li> <li>IoT Hub connection setup</li> <li>Device authentication</li> <li>SAS token management</li> <li>Topic routing</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get up and running in seconds with BunkerM:</p> <pre><code># With non-persistent data\ndocker run -d -p 1900:1900 -p 2000:2000 bunkeriot/bunkerm\n\n# With persistent data\ndocker run -d -p 1900:1900 -p 2000:2000 -v mosquitto_data:/var/lib/mosquitto -v auth_data:/data bunkeriot/bunkerm\n\n# For remote connection (from outside the host machine)\ndocker run -p 2000:2000 -p 1900:1900 -e HOST_ADDRESS=&lt;HOST_IP&gt; bunkeriot/bunkerm\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation - Detailed installation instructions</li> <li>Quick Start - Get up and running quickly</li> <li>First Login - Initial setup and configuration</li> </ul>"},{"location":"#support-bunkerm","title":"Support BunkerM","text":"<p>BunkerM is an open-source project. If you find it useful, please consider supporting its development:</p> <ul> <li>GitHub Repository</li> <li>Website</li> <li>Contact</li> </ul>"},{"location":"#license","title":"License","text":"<p>BunkerM is licensed under the Apache License 2.0. </p>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#general-questions","title":"General Questions","text":""},{"location":"faq/#what-is-bunkerm","title":"What is BunkerM?","text":"<p>BunkerM is an all-in-one Mosquitto MQTT broker with a comprehensive web UI for easy management. It combines a pre-configured Mosquitto broker with a powerful management interface, dynamic security controls, monitoring capabilities, and cloud integration features.</p>"},{"location":"faq/#is-bunkerm-open-source","title":"Is BunkerM open source?","text":"<p>Yes, BunkerM Community Edition is open source and freely available. There are also Pro and Enterprise editions with additional features for commercial use.</p>"},{"location":"faq/#what-platforms-does-bunkerm-support","title":"What platforms does BunkerM support?","text":"<p>BunkerM runs on any platform that supports Docker, including: - Linux (all major distributions) - Windows - macOS - Raspberry Pi and other ARM-based devices</p>"},{"location":"faq/#what-mqtt-versions-does-bunkerm-support","title":"What MQTT versions does BunkerM support?","text":"<p>BunkerM supports: - MQTT 3.1 - MQTT 3.1.1 - MQTT 5.0</p>"},{"location":"faq/#installation-and-setup","title":"Installation and Setup","text":""},{"location":"faq/#what-are-the-system-requirements-for-bunkerm","title":"What are the system requirements for BunkerM?","text":"<p>Minimum requirements: - Docker 19.03 or higher - 1+ CPU cores - 512MB RAM (1GB+ recommended) - 1GB free disk space - Ports 1900 and 2000 available</p>"},{"location":"faq/#how-do-i-install-bunkerm","title":"How do I install BunkerM?","text":"<p>The simplest way is using Docker:</p> <pre><code>docker run -d -p 1900:1900 -p 2000:2000 bunkeriot/bunkerm\n</code></pre> <p>For persistent data:</p> <pre><code>docker run -d -p 1900:1900 -p 2000:2000 \\\n  -v mosquitto_data:/var/lib/mosquitto \\\n  -v auth_data:/data \\\n  bunkeriot/bunkerm\n</code></pre>"},{"location":"faq/#what-ports-does-bunkerm-use","title":"What ports does BunkerM use?","text":"<p>By default, BunkerM uses: - Port 1900 for MQTT communication - Port 2000 for the web interface</p> <p>These can be mapped to different ports if needed.</p>"},{"location":"faq/#how-do-i-access-the-web-interface","title":"How do I access the web interface?","text":"<p>Open your web browser and navigate to <code>http://localhost:2000</code> (or the appropriate address if installed on a remote server).</p>"},{"location":"faq/#what-are-the-default-login-credentials","title":"What are the default login credentials?","text":"<p>The default credentials are: - Username: admin@example.com - Password: password123</p> <p>You should change these immediately after your first login.</p>"},{"location":"faq/#mqtt-features","title":"MQTT Features","text":""},{"location":"faq/#how-many-clients-can-connect-to-bunkerm","title":"How many clients can connect to BunkerM?","text":"<p>BunkerM can handle thousands of concurrent client connections, limited only by your system resources. The default configuration allows unlimited connections, but you can set a limit in the broker configuration.</p>"},{"location":"faq/#does-bunkerm-support-websockets","title":"Does BunkerM support WebSockets?","text":"<p>Yes, BunkerM supports MQTT over WebSockets, allowing web applications to connect directly to the broker.</p>"},{"location":"faq/#does-bunkerm-support-tlsssl","title":"Does BunkerM support TLS/SSL?","text":"<p>Yes, BunkerM can be configured to use TLS/SSL for secure communications. The default configuration uses HTTP for simplicity, but you can configure it to use your own certificates for HTTPS.</p>"},{"location":"faq/#can-i-use-bunkerm-with-existing-mqtt-clients","title":"Can I use BunkerM with existing MQTT clients?","text":"<p>Yes, BunkerM is compatible with any standard MQTT client, including: - Mosquitto clients - MQTT.js - Paho - HiveMQ clients - And many others</p>"},{"location":"faq/#security","title":"Security","text":""},{"location":"faq/#how-does-bunkerm-handle-authentication","title":"How does BunkerM handle authentication?","text":"<p>BunkerM uses username and password authentication for MQTT clients. You can create and manage client credentials through the web interface.</p>"},{"location":"faq/#how-does-access-control-work-in-bunkerm","title":"How does access control work in BunkerM?","text":"<p>BunkerM uses a role-based access control system: 1. Create roles with specific topic permissions 2. Assign roles to clients directly or via groups 3. Clients can only access topics according to their roles' permissions</p>"},{"location":"faq/#is-communication-between-clients-and-the-broker-encrypted","title":"Is communication between clients and the broker encrypted?","text":"<p>Yes, BunkerM supports TLS/SSL encryption for secure communication between clients and the broker.</p>"},{"location":"faq/#can-i-integrate-bunkerm-with-external-authentication-systems","title":"Can I integrate BunkerM with external authentication systems?","text":"<p>The Enterprise Edition supports integration with LDAP and OAuth 2.0/JWT authentication systems.</p>"},{"location":"faq/#management-and-monitoring","title":"Management and Monitoring","text":""},{"location":"faq/#how-can-i-monitor-broker-performance","title":"How can I monitor broker performance?","text":"<p>BunkerM provides a comprehensive dashboard showing: - Connected clients - Message throughput - Subscription counts - Retained message counts - Real-time activity logs</p>"},{"location":"faq/#can-i-export-logs-and-metrics","title":"Can I export logs and metrics?","text":"<p>Yes, you can export broker logs and performance metrics for external analysis or record-keeping.</p>"},{"location":"faq/#how-do-i-back-up-my-bunkerm-configuration","title":"How do I back up my BunkerM configuration?","text":"<p>To back up your configuration and data:</p> <pre><code>docker run --rm -v mosquitto_data:/data -v $(pwd)/backup:/backup \\\n  alpine sh -c \"cd /data &amp;&amp; tar czf /backup/mosquitto_data.tar.gz .\"\n</code></pre>"},{"location":"faq/#can-i-manage-multiple-brokers-from-one-interface","title":"Can I manage multiple brokers from one interface?","text":"<p>The Enterprise Edition supports managing multiple brokers from a single interface.</p>"},{"location":"faq/#cloud-integration","title":"Cloud Integration","text":""},{"location":"faq/#what-cloud-platforms-does-bunkerm-integrate-with","title":"What cloud platforms does BunkerM integrate with?","text":"<p>The Pro and Enterprise editions support integration with: - AWS IoT Core - Azure IoT Hub</p>"},{"location":"faq/#how-does-the-cloud-integration-work","title":"How does the cloud integration work?","text":"<p>BunkerM creates a bridge between your local MQTT broker and the cloud platform, allowing bidirectional message flow between local devices and cloud services.</p>"},{"location":"faq/#do-i-need-cloud-integration-to-use-bunkerm","title":"Do I need cloud integration to use BunkerM?","text":"<p>No, cloud integration is an optional feature. BunkerM functions perfectly as a standalone MQTT broker without any cloud connectivity.</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#why-cant-my-clients-connect-to-the-broker","title":"Why can't my clients connect to the broker?","text":"<p>Common reasons include: - Incorrect client credentials - Firewall blocking port 1900 - Broker not running - Reaching maximum connection limit</p> <p>Check the Troubleshooting Guide for detailed solutions.</p>"},{"location":"faq/#how-do-i-reset-the-admin-password-if-i-forget-it","title":"How do I reset the admin password if I forget it?","text":"<p>If you've forgotten the admin password, you can reset it by:</p> <pre><code>docker exec -it &lt;container_id&gt; /bin/bash\ncd /app\nnode reset-admin-password.js\n</code></pre> <p>This will reset the password to the default \"admin\".</p>"},{"location":"faq/#licensing-and-support","title":"Licensing and Support","text":""},{"location":"faq/#whats-the-difference-between-community-pro-and-enterprise-editions","title":"What's the difference between Community, Pro, and Enterprise editions?","text":"<ul> <li>Community: Free, open-source edition with core features</li> <li>Pro: Adds cloud integration, enhanced monitoring, and commercial support</li> <li>Enterprise: Adds clustering, high availability, LDAP integration, and more</li> </ul>"},{"location":"faq/#how-do-i-get-support-for-bunkerm","title":"How do I get support for BunkerM?","text":"<ul> <li>Community Edition: GitHub issues and community forums</li> <li>Pro/Enterprise: Email support, priority issue resolution, and optional SLA</li> </ul>"},{"location":"faq/#how-can-i-contribute-to-bunkerm","title":"How can I contribute to BunkerM?","text":"<p>You can contribute to BunkerM by: - Submitting pull requests on GitHub - Reporting bugs and suggesting features - Improving documentation - Sharing your experience with the community</p>"},{"location":"faq/#how-do-i-upgrade-from-community-to-pro-or-enterprise","title":"How do I upgrade from Community to Pro or Enterprise?","text":"<p>Contact the BunkerM team at m.idrissi@bunkeriot.com for information about upgrading to Pro or Enterprise editions.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>This guide provides solutions for common issues you might encounter when using BunkerM. If you're experiencing problems, follow the relevant troubleshooting steps below.</p>"},{"location":"troubleshooting/#connection-issues","title":"Connection Issues","text":""},{"location":"troubleshooting/#cant-access-the-web-ui","title":"Can't Access the Web UI","text":"<p>If you can't access the BunkerM web interface:</p> <ol> <li> <p>Verify the container is running:    <pre><code>docker ps | grep bunkerm\n</code></pre>    If the container isn't listed, restart it:    <pre><code>docker run -d -p 1900:1900 -p 2000:2000 bunkeriot/bunkerm\n</code></pre></p> </li> <li> <p>Check port availability:    Ensure port 2000 isn't being used by another application:    <pre><code>netstat -tuln | grep 2000\n</code></pre></p> </li> <li> <p>Verify network connectivity:    If accessing from another machine, ensure there are no firewall rules blocking port 2000.</p> </li> <li> <p>Check browser compatibility:</p> </li> <li>Make sure you're using a modern, up-to-date browser</li> <li>Clear your browser cache if you're experiencing UI issues</li> </ol>"},{"location":"troubleshooting/#mqtt-clients-cant-connect","title":"MQTT Clients Can't Connect","text":"<p>If MQTT clients can't connect to the broker:</p> <ol> <li> <p>Verify the broker is running:    Check the broker status in the dashboard.</p> </li> <li> <p>Check client credentials:</p> </li> <li>Ensure the client username and password are correct</li> <li> <p>Verify the client exists in the Client Management page</p> </li> <li> <p>Check port availability:    Ensure port 1900 isn't being used by another application:    <pre><code>netstat -tuln | grep 1900\n</code></pre></p> </li> <li> <p>Test with a simple client:    <pre><code>mosquitto_pub -h localhost -p 1900 -u your_client -P your_password -t test -m \"test\"\n</code></pre></p> </li> <li> <p>Check broker logs:    Review the Broker Logs for authentication failures or other errors.</p> </li> </ol>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#slow-web-ui","title":"Slow Web UI","text":"<p>If the web interface is responding slowly:</p> <ol> <li> <p>Check system resources:    Verify your host has sufficient CPU and memory available.</p> </li> <li> <p>Reduce log verbosity:    Lower the logging level in the broker configuration.</p> </li> <li> <p>Clear browser cache:    Clear your browser's cache and cookies.</p> </li> <li> <p>Check network latency:    If accessing remotely, network latency might be affecting performance.</p> </li> </ol>"},{"location":"troubleshooting/#broker-performance-problems","title":"Broker Performance Problems","text":"<p>If the MQTT broker is experiencing performance issues:</p> <ol> <li> <p>Check system resources:    Monitor CPU, memory, and disk usage on the host system.</p> </li> <li> <p>Review connection count:    Check how many clients are connected and whether you're approaching limits.</p> </li> <li> <p>Examine message rates:    Look for unusually high message rates that might be overloading the broker.</p> </li> <li> <p>Check retained messages:    Too many retained messages can impact performance.</p> </li> <li> <p>Review QoS settings:    Higher QoS levels require more resources.</p> </li> </ol>"},{"location":"troubleshooting/#security-issues","title":"Security Issues","text":""},{"location":"troubleshooting/#authentication-failures","title":"Authentication Failures","text":"<p>If clients are failing to authenticate:</p> <ol> <li> <p>Verify client credentials:    Double-check the username and password in the Client Management page.</p> </li> <li> <p>Check for special characters:    Ensure passwords don't contain special characters that might need escaping.</p> </li> <li> <p>Review broker logs:    Check the logs for specific authentication error messages.</p> </li> </ol>"},{"location":"troubleshooting/#permission-denied-errors","title":"Permission Denied Errors","text":"<p>If clients can connect but can't publish or subscribe:</p> <ol> <li> <p>Check ACL rules:    Review the role permissions assigned to the client.</p> </li> <li> <p>Verify topic syntax:    Ensure the topic matches the pattern specified in the ACL rules.</p> </li> <li> <p>Check group assignments:    Verify the client is in the correct groups with the necessary roles.</p> </li> <li> <p>Test with a simpler topic:    Try publishing to a simple topic to isolate the issue.</p> </li> </ol>"},{"location":"troubleshooting/#data-persistence-issues","title":"Data Persistence Issues","text":""},{"location":"troubleshooting/#lost-configuration-after-restart","title":"Lost Configuration After Restart","text":"<p>If your configuration changes don't persist after container restart:</p> <ol> <li> <p>Use volume mounts:    Ensure you're using volume mounts for persistent data:    <pre><code>docker run -d -p 1900:1900 -p 2000:2000 \\\n  -v mosquitto_data:/var/lib/mosquitto \\\n  -v auth_data:/data \\\n  bunkeriot/bunkerm\n</code></pre></p> </li> <li> <p>Check volume permissions:    Ensure the container has write permissions to the mounted volumes.</p> </li> <li> <p>Verify changes were saved:    Some changes require explicit saving through the UI.</p> </li> </ol>"},{"location":"troubleshooting/#lost-messages","title":"Lost Messages","text":"<p>If retained messages are being lost:</p> <ol> <li> <p>Check persistence settings:    Verify that persistence is enabled in the broker configuration.</p> </li> <li> <p>Check storage location:    Ensure the persistence directory is on a mounted volume.</p> </li> <li> <p>Verify disk space:    Check that there's sufficient disk space available.</p> </li> </ol>"},{"location":"troubleshooting/#update-and-upgrade-issues","title":"Update and Upgrade Issues","text":""},{"location":"troubleshooting/#failed-updates","title":"Failed Updates","text":"<p>If you encounter issues when updating BunkerM:</p> <ol> <li> <p>Check compatibility:    Verify that the new version is compatible with your setup.</p> </li> <li> <p>Backup before updating:    Always backup your data before updating:    <pre><code>docker run --rm -v mosquitto_data:/data -v $(pwd)/backup:/backup \\\n  alpine sh -c \"cd /data &amp;&amp; tar czf /backup/mosquitto_data.tar.gz .\"\n</code></pre></p> </li> <li> <p>Check logs after update:    Review the logs for any errors after updating.</p> </li> </ol>"},{"location":"troubleshooting/#migration-problems","title":"Migration Problems","text":"<p>If you're having trouble migrating from one version to another:</p> <ol> <li> <p>Follow the migration guide:    Check the release notes for specific migration instructions.</p> </li> <li> <p>Perform a clean install if necessary:    Sometimes a clean install with data import is easier than migration.</p> </li> </ol>"},{"location":"troubleshooting/#docker-specific-issues","title":"Docker-Specific Issues","text":""},{"location":"troubleshooting/#container-wont-start","title":"Container Won't Start","text":"<p>If the Docker container won't start:</p> <ol> <li> <p>Check Docker logs:    <pre><code>docker logs &lt;container_id&gt;\n</code></pre></p> </li> <li> <p>Verify Docker version:    Ensure you're running a supported Docker version.</p> </li> <li> <p>Check resource constraints:    Verify that Docker has sufficient resources allocated.</p> </li> <li> <p>Try with a clean container:    Remove the container and create a new one:    <pre><code>docker rm &lt;container_id&gt;\ndocker run -d -p 1900:1900 -p 2000:2000 bunkeriot/bunkerm\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#volume-mount-issues","title":"Volume Mount Issues","text":"<p>If you're having problems with volume mounts:</p> <ol> <li> <p>Check volume existence:    <pre><code>docker volume ls | grep mosquitto\n</code></pre></p> </li> <li> <p>Inspect volume details:    <pre><code>docker volume inspect mosquitto_data\n</code></pre></p> </li> <li> <p>Check permissions:    Ensure the Docker user has permissions to access the volume locations.</p> </li> </ol>"},{"location":"troubleshooting/#getting-additional-help","title":"Getting Additional Help","text":"<p>If you're still experiencing issues after trying these troubleshooting steps:</p> <ol> <li> <p>Check the documentation:    Review the relevant sections of this documentation for more detailed guidance.</p> </li> <li> <p>Search for similar issues:    Check if others have reported similar problems in the GitHub repository.</p> </li> <li> <p>Contact support:    Reach out to the BunkerM team at m.idrissi@bunkeriot.com.</p> </li> <li> <p>Community forums:    Post your question on community forums or discussion groups.</p> </li> <li> <p>Verify that port 2000 is available and not blocked by a firewall</p> </li> <li>Ensure Docker is running properly</li> <li>Check that the container is running with <code>docker ps</code> </li> </ol>"},{"location":"advanced/dynamic-security/","title":"Dynamic Security","text":"<p>BunkerM leverages Mosquitto's Dynamic Security Plugin to provide flexible, runtime-configurable access control for your MQTT broker. This powerful feature allows you to manage client authentication and authorization without restarting the broker.</p> <p></p>"},{"location":"advanced/dynamic-security/#understanding-dynamic-security","title":"Understanding Dynamic Security","text":"<p>The Dynamic Security Plugin is an extension for Mosquitto that replaces the traditional static password and ACL file approach with a dynamic, JSON-based configuration system. BunkerM provides a user-friendly interface to manage this system.</p> <p>Key benefits include:</p> <ul> <li>Runtime Configuration: Change security settings without broker restarts</li> <li>Fine-grained Access Control: Detailed control over who can access what</li> <li>Hierarchical Structure: Organize clients into groups with inherited permissions</li> <li>Flexible Role System: Define reusable permission sets</li> <li>Import/Export Capability: Easily backup or transfer configurations</li> </ul>"},{"location":"advanced/dynamic-security/#dynamic-security-components","title":"Dynamic Security Components","text":"<p>The dynamic security system in BunkerM consists of several key components:</p>"},{"location":"advanced/dynamic-security/#clients","title":"Clients","text":"<p>Clients represent MQTT client connections and contain: - Username and password for authentication - Optional group memberships - Optional direct role assignments</p>"},{"location":"advanced/dynamic-security/#roles","title":"Roles","text":"<p>Roles define sets of permissions that can be assigned to clients or groups: - Topic access rules (publish/subscribe permissions) - Access control lists (ACLs) - Priority levels for conflict resolution</p>"},{"location":"advanced/dynamic-security/#groups","title":"Groups","text":"<p>Groups organize clients and provide: - Collective role assignments - Hierarchical structure (groups can contain other groups) - Simplified management for multiple clients</p>"},{"location":"advanced/dynamic-security/#acls","title":"ACLs","text":"<p>Access Control Lists define: - Which topics a client can publish to - Which topics a client can subscribe to - Whether access is allowed or denied</p>"},{"location":"advanced/dynamic-security/#importexport-acl","title":"Import/Export ACL","text":"<p>BunkerM provides a dedicated interface for importing and exporting the dynamic security configuration:</p>"},{"location":"advanced/dynamic-security/#exporting-configuration","title":"Exporting Configuration","text":"<p>To export your current dynamic security configuration:</p> <ol> <li>Navigate to MQTT Management &gt; Import/export ACL</li> <li>In the \"Export ACL\" section, click Export ACL</li> <li>The system will generate a JSON file containing all clients, roles, and groups</li> <li>Save the file to your local system</li> </ol> <p>This exported file can be used for: - Backup purposes - Transferring configuration between environments - Version control of your security settings</p>"},{"location":"advanced/dynamic-security/#importing-configuration","title":"Importing Configuration","text":"<p>To import a dynamic security configuration:</p> <ol> <li>Navigate to MQTT Management &gt; Import/export ACL</li> <li>In the \"Import ACL\" section, click the file input field</li> <li>Select a valid dynamic security JSON file</li> <li>Click Import ACL</li> </ol> <p>The import process will add all clients, roles, and groups defined in the JSON file to your BunkerM instance.</p> <p>Warning</p> <p>Importing a configuration will not remove existing entries. If you want to completely replace your configuration, consider resetting it first.</p>"},{"location":"advanced/dynamic-security/#dynamic-security-json-format","title":"Dynamic Security JSON Format","text":"<p>The dynamic security configuration uses a specific JSON format defined by the Mosquitto project. Here's a simplified example:</p> <pre><code>{\n  \"clients\": [\n    {\n      \"username\": \"client1\",\n      \"password\": \"hashedpassword\",\n      \"clientid\": \"client_1\",\n      \"groups\": [\"group1\"],\n      \"roles\": [\"role1\"]\n    }\n  ],\n  \"groups\": [\n    {\n      \"groupname\": \"group1\",\n      \"roles\": [\"role2\"]\n    }\n  ],\n  \"roles\": [\n    {\n      \"rolename\": \"role1\",\n      \"acls\": [\n        {\n          \"acltype\": \"publishClientSend\",\n          \"topic\": \"sensors/#\",\n          \"allow\": true\n        }\n      ]\n    },\n    {\n      \"rolename\": \"role2\",\n      \"acls\": [\n        {\n          \"acltype\": \"subscribePattern\",\n          \"topic\": \"commands/#\",\n          \"allow\": true\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>For the complete specification, refer to the official Mosquitto documentation.</p>"},{"location":"advanced/dynamic-security/#permission-evaluation","title":"Permission Evaluation","text":"<p>When a client attempts to publish to or subscribe to a topic, the dynamic security plugin evaluates permissions in the following order:</p> <ol> <li>Direct Client ACLs: ACLs directly assigned to the client via roles</li> <li>Group ACLs: ACLs inherited from groups the client belongs to</li> <li>Default Access: If no matching ACL is found, access is denied</li> </ol> <p>When multiple ACLs match a topic:</p> <ol> <li>More specific topic patterns take precedence over more general ones</li> <li>Deny rules take precedence over allow rules</li> <li>Higher priority roles take precedence over lower priority roles</li> </ol>"},{"location":"advanced/dynamic-security/#best-practices","title":"Best Practices","text":""},{"location":"advanced/dynamic-security/#security","title":"Security","text":"<ul> <li>Follow the principle of least privilege</li> <li>Use specific topic patterns rather than broad wildcards</li> <li>Regularly audit your security configuration</li> <li>Back up your dynamic security configuration regularly</li> </ul>"},{"location":"advanced/dynamic-security/#organization","title":"Organization","text":"<ul> <li>Create a logical group hierarchy</li> <li>Use descriptive names for roles and groups</li> <li>Document your security model</li> <li>Use roles for functional permissions, not individual clients</li> </ul>"},{"location":"advanced/dynamic-security/#performance","title":"Performance","text":"<ul> <li>Keep your security configuration as simple as possible</li> <li>Avoid excessive nesting of groups</li> <li>Use specific topic patterns to improve ACL evaluation performance</li> </ul>"},{"location":"advanced/dynamic-security/#related-documentation","title":"Related Documentation","text":"<ul> <li>Client Management - Managing MQTT client accounts</li> <li>Role Management - Configuring access control roles</li> <li>Group Management - Organizing clients into groups</li> <li>Password Management - Managing client credentials </li> </ul>"},{"location":"advanced/password-management/","title":"Password Management","text":"<p>BunkerM provides advanced password management features to help you migrate from existing Mosquitto installations and manage client credentials efficiently.</p> <p></p>"},{"location":"advanced/password-management/#importing-from-mosquitto-password-file","title":"Importing from Mosquitto Password File","text":"<p>If you're migrating from a standard Mosquitto broker, BunkerM allows you to import users from a <code>mosquitto_passwd</code> file while preserving their original password hashes.</p>"},{"location":"advanced/password-management/#what-is-a-mosquitto-password-file","title":"What is a Mosquitto Password File?","text":"<p>A Mosquitto password file is created and managed using the <code>mosquitto_passwd</code> utility that comes with Mosquitto. It contains usernames and hashed passwords for MQTT clients.</p> <p>Example of a <code>mosquitto_passwd</code> file content (not human-readable): <pre><code>user1:$6$QrAVXYZ$kbGxQa5jgDfIYE/...\nuser2:$6$AbCdEfG$hJkLmNoP/qRsTuV...\n</code></pre></p>"},{"location":"advanced/password-management/#import-process","title":"Import Process","text":"<p>To import users from a Mosquitto password file:</p> <ol> <li>Navigate to MQTT Management &gt; Import Mosquitto Password File</li> <li>Click the file input field and select your <code>mosquitto_passwd</code> file</li> <li>Click Import Users</li> <li>The system will process the file and display import results</li> </ol>"},{"location":"advanced/password-management/#import-results","title":"Import Results","text":"<p>After the import process completes, BunkerM will display a summary of the results:</p> <ul> <li>Total Users: The total number of users found in the file</li> <li>Successfully Imported: Users that were successfully added to BunkerM</li> <li>Skipped: Users that already exist in BunkerM (based on username)</li> <li>Failed: Users that could not be imported due to errors</li> </ul> <p>For each user, you'll see detailed information about the import status and any issues encountered.</p>"},{"location":"advanced/password-management/#considerations","title":"Considerations","text":"<p>When importing users from a Mosquitto password file:</p> <ul> <li>Usernames must be unique; if a username already exists in BunkerM, the import for that user will be skipped</li> <li>The password hashes are preserved, allowing users to continue using their existing passwords</li> <li>Imported users will not have any roles or group memberships assigned by default</li> <li>After import, you'll need to assign appropriate roles and groups to the imported users</li> </ul>"},{"location":"advanced/password-management/#password-security","title":"Password Security","text":"<p>BunkerM implements strong password security practices:</p>"},{"location":"advanced/password-management/#password-hashing","title":"Password Hashing","text":"<p>All passwords in BunkerM are securely hashed using modern cryptographic algorithms. The system never stores passwords in plain text.</p>"},{"location":"advanced/password-management/#password-requirements","title":"Password Requirements","text":"<p>When creating or updating passwords, BunkerM enforces the following requirements:</p> <ul> <li>Minimum length: 8 characters</li> <li>Should contain a mix of uppercase and lowercase letters, numbers, and special characters</li> </ul>"},{"location":"advanced/password-management/#password-rotation","title":"Password Rotation","text":"<p>For enhanced security, consider implementing a password rotation policy:</p> <ol> <li>Regularly update client passwords</li> <li>Use unique passwords for each client</li> <li>Keep a record of password changes</li> </ol>"},{"location":"advanced/password-management/#resetting-admin-password","title":"Resetting Admin Password","text":"<p>If you've forgotten the admin password for the BunkerM web interface:</p> <ol> <li> <p>Access the Docker container:    <pre><code>docker exec -it &lt;container_id&gt; /bin/bash\n</code></pre></p> </li> <li> <p>Navigate to the application directory:    <pre><code>cd /app\n</code></pre></p> </li> <li> <p>Run the password reset script:    <pre><code>node reset-admin-password.js\n</code></pre></p> </li> <li> <p>The admin password will be reset to the default: <code>admin</code></p> </li> <li> <p>Log in with the default password and immediately change it to a secure password</p> </li> </ol>"},{"location":"advanced/password-management/#best-practices","title":"Best Practices","text":""},{"location":"advanced/password-management/#security","title":"Security","text":"<ul> <li>Use strong, unique passwords for each client</li> <li>Regularly rotate passwords, especially for critical clients</li> <li>Limit access to password files and backups</li> <li>Use TLS/SSL encryption to protect password transmission</li> </ul>"},{"location":"advanced/password-management/#migration","title":"Migration","text":"<ul> <li>Back up your existing configuration before importing</li> <li>Test the import process in a non-production environment first</li> <li>Verify client connectivity after migration</li> <li>Document the migration process and results</li> </ul>"},{"location":"advanced/password-management/#management","title":"Management","text":"<ul> <li>Establish a clear password policy</li> <li>Document password reset procedures</li> <li>Consider using a password manager for administrative credentials</li> <li>Audit password changes regularly</li> </ul>"},{"location":"advanced/password-management/#related-documentation","title":"Related Documentation","text":"<ul> <li>Client Management - Managing MQTT client accounts</li> <li>Dynamic Security - Advanced security features</li> <li>Broker Configuration - Configuring authentication settings</li> <li>Troubleshooting - Solving authentication issues </li> </ul>"},{"location":"cloud/aws-iot-core/","title":"AWS IoT Core Integration","text":"<p>BunkerM Pro offers seamless integration with AWS IoT Core, allowing you to bridge your local MQTT broker with AWS's cloud-based IoT services. This integration enables bidirectional communication between your local devices and AWS IoT applications.</p> <p></p> <p>Pro Feature</p> <p>AWS IoT Core integration is available in the Pro and Enterprise editions of BunkerM.</p>"},{"location":"cloud/aws-iot-core/#benefits-of-aws-iot-core-integration","title":"Benefits of AWS IoT Core Integration","text":"<p>Connecting BunkerM to AWS IoT Core provides several advantages:</p> <ul> <li>Edge-to-Cloud Connectivity: Connect local devices to AWS cloud services</li> <li>Data Processing: Leverage AWS services for data analytics and storage</li> <li>Serverless Applications: Trigger AWS Lambda functions from MQTT messages</li> <li>Device Shadows: Use AWS IoT Device Shadows for offline device state management</li> <li>Security: Utilize AWS's robust security features alongside BunkerM's local security</li> </ul>"},{"location":"cloud/aws-iot-core/#configuration-overview","title":"Configuration Overview","text":"<p>The AWS IoT Bridge configuration page allows you to set up and manage the connection between BunkerM and AWS IoT Core.</p>"},{"location":"cloud/aws-iot-core/#prerequisites","title":"Prerequisites","text":"<p>Before configuring the AWS IoT Bridge, you'll need:</p> <ol> <li>An active AWS account</li> <li>An AWS IoT Core endpoint</li> <li>X.509 certificates for authentication:</li> <li>Client certificate</li> <li>Private key</li> <li>Root CA certificate</li> </ol>"},{"location":"cloud/aws-iot-core/#setting-up-aws-iot-core","title":"Setting Up AWS IoT Core","text":"<ol> <li>In the AWS Management Console, navigate to IoT Core</li> <li>Create a new Thing or use an existing one</li> <li>Create and download certificates</li> <li>Create a policy that allows connecting, publishing, and subscribing</li> <li>Attach the policy to your certificates</li> </ol>"},{"location":"cloud/aws-iot-core/#configuring-the-bridge","title":"Configuring the Bridge","text":"<p>To set up the AWS IoT Bridge in BunkerM:</p> <ol> <li>Navigate to Cloud Integration &gt; AWS IoT Bridge in the left sidebar</li> <li>Enter the following information:</li> <li>AWS IoT Endpoint: Your AWS IoT endpoint (e.g., <code>xxxxxxx-ats.iot.region.amazonaws.com</code>)</li> <li>Client ID: A unique identifier for the bridge connection</li> <li> <p>Topics: The MQTT topics to bridge (one per line)</p> </li> <li> <p>Upload the required certificate files:</p> </li> <li>Certificate File (.pem): The client certificate from AWS</li> <li>Private Key File (.pem): The private key from AWS</li> <li> <p>CA Certificate File (.pem): The root CA certificate</p> </li> <li> <p>Click Configure Bridge</p> </li> </ol>"},{"location":"cloud/aws-iot-core/#topic-mapping","title":"Topic Mapping","text":"<p>The AWS IoT Bridge supports bidirectional topic mapping between your local MQTT broker and AWS IoT Core:</p>"},{"location":"cloud/aws-iot-core/#local-to-aws-direction","title":"Local to AWS Direction","text":"<p>Messages published to specified topics on your local broker will be forwarded to AWS IoT Core with the same topic name.</p> <p>Example: - Local topic: <code>sensors/temperature</code> - AWS IoT Core receives: <code>sensors/temperature</code></p>"},{"location":"cloud/aws-iot-core/#aws-to-local-direction","title":"AWS to Local Direction","text":"<p>Messages published to specified topics on AWS IoT Core will be forwarded to your local broker with the same topic name.</p> <p>Example: - AWS IoT Core topic: <code>actuators/switch</code> - Local broker receives: <code>actuators/switch</code></p>"},{"location":"cloud/aws-iot-core/#advanced-configuration","title":"Advanced Configuration","text":"<p>For more complex setups, you can configure advanced options:</p>"},{"location":"cloud/aws-iot-core/#topic-transformations","title":"Topic Transformations","text":"<p>You can transform topic names during bridging:</p> <ul> <li>Prefix Addition: Add a prefix to topics when forwarding</li> <li>Topic Remapping: Change the topic structure completely</li> </ul>"},{"location":"cloud/aws-iot-core/#qos-settings","title":"QoS Settings","text":"<p>Configure the Quality of Service level for bridged messages:</p> <ul> <li>QoS 0: At most once delivery</li> <li>QoS 1: At least once delivery</li> <li>QoS 2: Exactly once delivery</li> </ul>"},{"location":"cloud/aws-iot-core/#connection-settings","title":"Connection Settings","text":"<p>Fine-tune the connection parameters:</p> <ul> <li>Keep Alive Interval: How often to send keep-alive messages</li> <li>Reconnect Delay: Time to wait before reconnecting after a failure</li> <li>Connection Timeout: How long to wait for a connection to establish</li> </ul>"},{"location":"cloud/aws-iot-core/#monitoring-the-bridge","title":"Monitoring the Bridge","text":"<p>BunkerM provides tools to monitor the health and activity of your AWS IoT Bridge:</p> <ol> <li>Connection Status: View the current connection state</li> <li>Message Statistics: Track messages flowing in both directions</li> <li>Error Logs: Identify and troubleshoot connection issues</li> </ol>"},{"location":"cloud/aws-iot-core/#security-considerations","title":"Security Considerations","text":"<p>When using the AWS IoT Bridge, keep these security best practices in mind:</p> <ul> <li>Store certificates securely</li> <li>Use specific topic filters rather than wildcards when possible</li> <li>Regularly rotate certificates according to your security policy</li> <li>Monitor bridge activity for unusual patterns</li> </ul>"},{"location":"cloud/aws-iot-core/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with the AWS IoT Bridge:</p>"},{"location":"cloud/aws-iot-core/#connection-problems","title":"Connection Problems","text":"<ul> <li>Verify your AWS IoT endpoint is correct</li> <li>Check that your certificates are valid and properly formatted</li> <li>Ensure your AWS IoT policy allows the necessary actions</li> </ul>"},{"location":"cloud/aws-iot-core/#message-flow-issues","title":"Message Flow Issues","text":"<ul> <li>Confirm that topics are correctly specified in the bridge configuration</li> <li>Check that local clients have permission to access bridged topics</li> <li>Verify that AWS IoT Core is receiving and processing messages</li> </ul>"},{"location":"cloud/aws-iot-core/#related-documentation","title":"Related Documentation","text":"<ul> <li>Azure IoT Hub - Similar integration with Microsoft's IoT platform</li> <li>Broker Configuration - Configure your local broker settings</li> <li>ACL Configuration - Set up access control for bridged topics </li> </ul>"},{"location":"getting-started/first-login/","title":"First Login","text":"<p>This guide will walk you through the initial login process and the essential first steps to secure and configure your BunkerM installation.</p>"},{"location":"getting-started/first-login/#accessing-the-login-page","title":"Accessing the Login Page","text":"<p>After installing BunkerM, you can access the web interface:</p> <ol> <li>Open your web browser and navigate to <code>http://localhost:2000</code> (or the appropriate address if installed on a remote server)</li> <li>You should now see the BunkerM login page</li> </ol> <p></p>"},{"location":"getting-started/first-login/#default-credentials","title":"Default Credentials","text":"<p>For your first login, use the following default credentials:</p> <ul> <li>Username: admin@example.com</li> <li>Password: password123</li> </ul>"},{"location":"getting-started/first-login/#changing-the-default-password","title":"Changing the Default Password","text":"<p>For security reasons, you should change the default password immediately after your first login:</p> <ol> <li>After logging in, click on your username in the top-right corner</li> <li>Select Account Settings from the dropdown menu</li> <li>In the Change Password section, enter your current password and your new password twice</li> <li>Click Update Password</li> </ol> <p>Warning</p> <p>Using the default credentials in a production environment poses a significant security risk. Always change the default password immediately.</p>"},{"location":"getting-started/first-login/#initial-dashboard-overview","title":"Initial Dashboard Overview","text":"<p>After logging in, you'll be taken to the main dashboard, which provides an overview of your MQTT broker's status:</p> <ul> <li>Connected Clients: Shows the number of currently connected MQTT clients</li> <li>Message Statistics: Displays message throughput metrics</li> <li>Broker Status: Indicates whether the broker is running properly</li> <li>Recent Activity: Shows recent connection and message events</li> </ul>"},{"location":"getting-started/first-login/#essential-first-time-setup-tasks","title":"Essential First-Time Setup Tasks","text":""},{"location":"getting-started/first-login/#1-configure-broker-settings","title":"1. Configure Broker Settings","text":"<p>Before using BunkerM in production, you should review and adjust the broker configuration:</p> <ol> <li>Navigate to MQTT Management &gt; Broker Configuration in the left sidebar</li> <li>Review the default settings and adjust them according to your needs</li> <li>Pay special attention to:</li> <li>Maximum connections</li> <li>Maximum message size</li> <li>Persistence settings</li> <li>Logging levels</li> <li>Click Save Configuration when done</li> </ol>"},{"location":"getting-started/first-login/#2-create-administrator-accounts","title":"2. Create Administrator Accounts","text":"<p>If multiple people will be managing the broker, create separate administrator accounts:</p> <ol> <li>Navigate to Administration &gt; User Management</li> <li>Click Add User</li> <li>Fill in the user details and select the appropriate role</li> <li>Click Save</li> </ol>"},{"location":"getting-started/first-login/#3-set-up-your-first-mqtt-client","title":"3. Set Up Your First MQTT Client","text":"<p>To test that everything is working correctly:</p> <ol> <li>Navigate to MQTT Management &gt; Client Management</li> <li>Click Add Client</li> <li>Enter a username and password for your test client</li> <li>Click Save</li> </ol>"},{"location":"getting-started/first-login/#4-configure-access-control","title":"4. Configure Access Control","text":"<p>BunkerM uses a role-based access control system for MQTT clients:</p> <ol> <li>Navigate to MQTT Management &gt; Role Management</li> <li>Click Add Role</li> <li>Create a basic role with appropriate permissions</li> <li>Assign this role to your test client</li> </ol>"},{"location":"getting-started/first-login/#next-steps","title":"Next Steps","text":"<p>After completing the initial setup, you can:</p> <ul> <li>Configure more detailed ACL rules</li> <li>Set up client groups</li> <li>Explore monitoring capabilities</li> <li>Configure cloud integrations (Pro feature)</li> </ul> <p>For more detailed information on any of these topics, refer to the specific sections in this documentation. </p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide covers the different ways to install and deploy BunkerM, the all-in-one Mosquitto MQTT broker with web UI.</p>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":"<p>Before deploying BunkerM, ensure your system meets the following requirements:</p> <ul> <li>Docker: Version 19.03 or higher</li> <li>CPU: 1+ cores</li> <li>RAM: 512MB minimum (1GB+ recommended)</li> <li>Storage: 1GB minimum free space</li> <li>Ports: 1900 (MQTT) and 2000 (Web UI) must be available</li> </ul>"},{"location":"getting-started/installation/#docker-installation","title":"Docker Installation","text":"<p>The recommended way to install BunkerM is using Docker. This method provides the simplest setup experience and works across all major platforms.</p>"},{"location":"getting-started/installation/#basic-deployment","title":"Basic Deployment","text":"<pre><code>docker run -d -p 1900:1900 -p 2000:2000 bunkeriot/bunkerm\n</code></pre> <p>This command: - Runs BunkerM in detached mode (<code>-d</code>) - Maps the MQTT broker port to 1900 (<code>-p 1900:1900</code>) - Maps the Web UI port to 2000 (<code>-p 2000:2000</code>) - Uses the official BunkerM image (<code>bunkeriot/bunkerm</code>)</p>"},{"location":"getting-started/installation/#persistent-data-deployment","title":"Persistent Data Deployment","text":"<p>For production environments, you'll want to persist your data across container restarts:</p> <pre><code>docker run -d -p 1900:1900 -p 2000:2000 \\\n  -v mosquitto_data:/var/lib/mosquitto \\\n  -v auth_data:/data \\\n  bunkeriot/bunkerm\n</code></pre> <p>This command adds: - A volume for Mosquitto data (<code>-v mosquitto_data:/var/lib/mosquitto</code>) - A volume for authentication data (<code>-v auth_data:/data</code>)</p>"},{"location":"getting-started/installation/#remote-access-installation","title":"Remote Access Installation","text":"<p>If you need to access BunkerM from outside the host machine:</p> <pre><code>docker run -d -p 1900:1900 -p 2000:2000 \\\n  -e HOST_ADDRESS=&lt;HOST_IP&gt; \\\n  bunkeriot/bunkerm\n</code></pre> <p>Replace <code>&lt;HOST_IP&gt;</code> with your host machine's IP address or domain name.</p>"},{"location":"getting-started/installation/#docker-compose-installation","title":"Docker Compose Installation","text":"<p>For more complex setups, you can use Docker Compose:</p> <ol> <li>Create a file named <code>docker-compose.yml</code> with the following content:</li> </ol> <pre><code>version: '3'\nservices:\n  bunkerm:\n    image: bunkeriot/bunkerm\n    ports:\n      - \"1900:1900\"\n      - \"2000:2000\"\n    volumes:\n      - mosquitto_data:/var/lib/mosquitto\n      - auth_data:/data\n    environment:\n      - HOST_ADDRESS=localhost  # Change this for remote access\n    restart: unless-stopped\n\nvolumes:\n  mosquitto_data:\n  auth_data:\n</code></pre> <ol> <li>Run the following command in the same directory:</li> </ol> <pre><code>docker-compose up -d\n</code></pre>"},{"location":"getting-started/installation/#kubernetes-installation","title":"Kubernetes Installation","text":"<p>For Kubernetes deployments:</p> <ol> <li>Create a file named <code>bunkerm-deployment.yaml</code> with the following content:</li> </ol> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: bunkerm\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: bunkerm\n  template:\n    metadata:\n      labels:\n        app: bunkerm\n    spec:\n      containers:\n      - name: bunkerm\n        image: bunkeriot/bunkerm\n        ports:\n        - containerPort: 1900\n          name: mqtt\n        - containerPort: 2000\n          name: webui\n        volumeMounts:\n        - name: mosquitto-data\n          mountPath: /var/lib/mosquitto\n        - name: auth-data\n          mountPath: /data\n      volumes:\n      - name: mosquitto-data\n        persistentVolumeClaim:\n          claimName: mosquitto-data-pvc\n      - name: auth-data\n        persistentVolumeClaim:\n          claimName: auth-data-pvc\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: bunkerm\nspec:\n  selector:\n    app: bunkerm\n  ports:\n  - name: mqtt\n    port: 1900\n    targetPort: 1900\n  - name: webui\n    port: 2000\n    targetPort: 2000\n  type: LoadBalancer\n</code></pre> <ol> <li>Apply the configuration:</li> </ol> <pre><code>kubectl apply -f bunkerm-deployment.yaml\n</code></pre>"},{"location":"getting-started/installation/#verifying-the-installation","title":"Verifying the Installation","text":"<p>After installation, verify that BunkerM is running correctly:</p> <ol> <li>Open your web browser and navigate to <code>http://localhost:2000</code></li> <li>You should see the BunkerM login page</li> </ol>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues during installation:</p> <ul> <li>Web UI not accessible: Verify that port 2000 is not being used by another application</li> <li>MQTT broker not accessible: Verify that port 1900 is not being used by another application</li> <li>Container fails to start: Check Docker logs with <code>docker logs &lt;container_id&gt;</code></li> </ul>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Now that you have BunkerM installed, proceed to the Quick Start Guide to learn how to configure and use your MQTT broker. </p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>This guide will help you get up and running with BunkerM quickly. We'll cover the basics of starting the container, accessing the web interface, and creating your first MQTT client.</p>"},{"location":"getting-started/quick-start/#starting-bunkerm","title":"Starting BunkerM","text":"<p>The fastest way to start BunkerM is using Docker:</p> <pre><code>docker run -d -p 1900:1900 -p 2000:2000 bunkeriot/bunkerm\n</code></pre> <p>This command will: - Download the BunkerM image (if not already present) - Start a container in detached mode - Map port 1900 for MQTT communication - Map port 2000 for the web interface</p>"},{"location":"getting-started/quick-start/#accessing-the-web-interface","title":"Accessing the Web Interface","text":"<ol> <li>Open your web browser and navigate to <code>http://localhost:2000</code></li> <li>You should see the BunkerM login page</li> </ol>"},{"location":"getting-started/quick-start/#first-login","title":"First Login","text":"<p>For your first login, use the following credentials:</p> <ul> <li>Username: admin</li> <li>Password: admin</li> </ul> <p>Warning</p> <p>For security reasons, you should change the default password immediately after your first login.</p>"},{"location":"getting-started/quick-start/#creating-your-first-mqtt-client","title":"Creating Your First MQTT Client","text":"<p>Before you can connect to the MQTT broker, you need to create a client:</p> <ol> <li>In the left sidebar, navigate to MQTT Management &gt; Client Management</li> <li>Click the Add client button in the top right corner</li> <li>Enter a username and password for your MQTT client</li> <li>Click Save</li> </ol> <p></p>"},{"location":"getting-started/quick-start/#connecting-to-the-mqtt-broker","title":"Connecting to the MQTT Broker","text":"<p>Now that you've created a client, you can connect to the MQTT broker using any MQTT client application:</p> <ul> <li>Broker Address: localhost (or your server's IP address)</li> <li>Port: 1900</li> <li>Username: The client username you created</li> <li>Password: The client password you created</li> </ul>"},{"location":"getting-started/quick-start/#example-with-mosquitto-cli","title":"Example with Mosquitto CLI","text":"<pre><code>mosquitto_pub -h localhost -p 1900 -u your_client_username -P your_client_password -t test/topic -m \"Hello from BunkerM!\"\n</code></pre>"},{"location":"getting-started/quick-start/#example-with-mqtt-explorer","title":"Example with MQTT Explorer","text":"<ol> <li>Download and install MQTT Explorer</li> <li>Create a new connection with the following settings:</li> <li>Host: localhost</li> <li>Port: 1900</li> <li>Username: Your client username</li> <li>Password: Your client password</li> <li>Click Connect</li> </ol>"},{"location":"getting-started/quick-start/#monitoring-mqtt-activity","title":"Monitoring MQTT Activity","text":"<p>BunkerM provides real-time monitoring of MQTT activity:</p> <ol> <li>Navigate to the Dashboard in the left sidebar</li> <li>View the \"Recent MQTT Events\" panel to see real-time connection and message activity</li> <li>Check the \"Broker Statistics\" panel for overall performance metrics</li> </ol>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Now that you have BunkerM up and running, you can:</p> <ul> <li>Configure broker settings</li> <li>Set up role-based access control</li> <li>Organize clients into groups</li> <li>Monitor broker and client logs</li> </ul> <p>For more detailed information, explore the rest of the documentation. </p>"},{"location":"monitoring/broker-logs/","title":"Broker Logs","text":"<p>The Broker Logs interface in BunkerM provides detailed visibility into the Mosquitto MQTT broker's operation. These logs are essential for troubleshooting issues, monitoring broker health, and understanding client connection patterns.</p> <p></p>"},{"location":"monitoring/broker-logs/#understanding-broker-logs","title":"Understanding Broker Logs","text":"<p>Broker logs capture various events and activities within the Mosquitto MQTT broker, including:</p> <ul> <li>Client connections and disconnections</li> <li>Authentication successes and failures</li> <li>Subscription activities</li> <li>Configuration changes</li> <li>Error conditions</li> <li>Broker startup and shutdown events</li> </ul> <p>These logs provide a chronological record of all significant events in the broker's operation.</p>"},{"location":"monitoring/broker-logs/#log-interface-overview","title":"Log Interface Overview","text":"<p>The broker logs interface displays a table of log entries with the following information:</p> <ul> <li>Timestamp: When the log entry was recorded</li> <li>Level: The severity level of the log entry</li> <li>Message: The detailed log message</li> <li>Source: The component that generated the log entry</li> </ul>"},{"location":"monitoring/broker-logs/#log-levels","title":"Log Levels","text":"<p>BunkerM displays logs with different severity levels, each indicated by a distinct color:</p> <ul> <li>Debug (Gray): Detailed information useful for debugging</li> <li>Info (Blue): General information about normal operation</li> <li>Notice (Green): Important but normal events</li> <li>Warning (Orange): Potential issues that don't affect core functionality</li> <li>Error (Red): Serious problems that affect functionality</li> <li>Critical (Purple): Severe errors that may cause system instability</li> </ul>"},{"location":"monitoring/broker-logs/#filtering-logs","title":"Filtering Logs","text":"<p>To help you find relevant information quickly, the broker logs interface provides several filtering options:</p>"},{"location":"monitoring/broker-logs/#time-range-filtering","title":"Time Range Filtering","text":"<p>Select logs from a specific time period:</p> <ul> <li>Last hour: Show only logs from the past hour</li> <li>Last day: Show only logs from the past 24 hours</li> <li>Last week: Show only logs from the past 7 days</li> <li>Custom range: Specify a custom date and time range</li> </ul>"},{"location":"monitoring/broker-logs/#level-filtering","title":"Level Filtering","text":"<p>Filter logs by severity level:</p> <ul> <li>Select one or more log levels to display</li> <li>Deselect levels you want to hide</li> </ul>"},{"location":"monitoring/broker-logs/#text-search","title":"Text Search","text":"<p>Search for specific text within log messages:</p> <ul> <li>Enter keywords in the search box</li> <li>The results will show only logs containing those keywords</li> </ul>"},{"location":"monitoring/broker-logs/#exporting-logs","title":"Exporting Logs","text":"<p>For record-keeping or external analysis, you can export broker logs:</p> <ol> <li>Apply any desired filters to narrow down the logs</li> <li>Click the Export button</li> <li>Choose your preferred format (CSV or JSON)</li> <li>Save the file to your local system</li> </ol>"},{"location":"monitoring/broker-logs/#common-log-patterns","title":"Common Log Patterns","text":"<p>Understanding common log patterns can help you quickly identify issues:</p>"},{"location":"monitoring/broker-logs/#normal-operation","title":"Normal Operation","text":"<pre><code>1678901234: New client connected from 192.168.1.100 as client123 (c1, k60, u'client123').\n1678901235: Client client123 disconnected.\n</code></pre> <p>These logs show normal client connection and disconnection events.</p>"},{"location":"monitoring/broker-logs/#authentication-issues","title":"Authentication Issues","text":"<pre><code>1678901234: Client client456 disconnected due to protocol error.\n1678901235: Client &lt;unknown&gt; disconnected, not authorized.\n</code></pre> <p>These logs indicate clients failing to authenticate properly.</p>"},{"location":"monitoring/broker-logs/#configuration-problems","title":"Configuration Problems","text":"<pre><code>1678901234: Error: Unable to load certificate file.\n1678901235: Warning: Maximum connections limit reached.\n</code></pre> <p>These logs point to configuration issues that need attention.</p>"},{"location":"monitoring/broker-logs/#troubleshooting-with-broker-logs","title":"Troubleshooting with Broker Logs","text":""},{"location":"monitoring/broker-logs/#connection-issues","title":"Connection Issues","text":"<p>If clients can't connect to the broker:</p> <ol> <li>Look for authentication errors in the logs</li> <li>Check for \"maximum connections\" warnings</li> <li>Verify that the broker is accepting connections on the expected port</li> </ol>"},{"location":"monitoring/broker-logs/#performance-problems","title":"Performance Problems","text":"<p>If the broker is performing poorly:</p> <ol> <li>Look for warnings about resource limits</li> <li>Check for frequent client disconnections and reconnections</li> <li>Monitor for unusual message patterns</li> </ol>"},{"location":"monitoring/broker-logs/#security-concerns","title":"Security Concerns","text":"<p>To investigate potential security issues:</p> <ol> <li>Look for repeated authentication failures from the same IP address</li> <li>Check for unauthorized access attempts</li> <li>Monitor for unusual connection patterns</li> </ol>"},{"location":"monitoring/broker-logs/#log-retention","title":"Log Retention","text":"<p>BunkerM retains broker logs according to the following policy:</p> <ul> <li>Default retention: 7 days</li> <li>Maximum log size: 1GB</li> </ul> <p>When logs exceed these limits, older entries are automatically pruned.</p>"},{"location":"monitoring/broker-logs/#related-documentation","title":"Related Documentation","text":"<ul> <li>Client Logs - For client-specific activity logs</li> <li>Performance Metrics - For broker performance monitoring</li> <li>Troubleshooting - General troubleshooting guidance </li> </ul>"},{"location":"monitoring/connect-clients/","title":"MQTT Clients Listing","text":"<p>This feature provides a comprehensive interface for monitoring and managing MQTT client connections in real-time. This feature allows administrators to track client connection events, view detailed information about connected clients, and manage client access.</p>"},{"location":"monitoring/connect-clients/#overview","title":"Overview","text":"<p>The Connect Clients interface displays a table of recent MQTT events, focusing on client connections and disconnections. Each entry in the table provides detailed information about the client and the event, allowing administrators to monitor client activity and troubleshoot connection issues.</p> <p></p>"},{"location":"monitoring/connect-clients/#features","title":"Features","text":""},{"location":"monitoring/connect-clients/#real-time-event-monitoring","title":"Real-time Event Monitoring","text":"<ul> <li>Automatic Updates: The interface polls for new events every 5 seconds, ensuring you always have the most up-to-date information.</li> <li>Event Filtering: Easily filter out system clients (like 'bunker') to focus on user connections.</li> <li>Search Functionality: Quickly find specific clients or events using the search bar.</li> </ul>"},{"location":"monitoring/connect-clients/#event-information","title":"Event Information","text":"<p>Each event in the table includes the following information:</p> <ul> <li>Timestamp: When the event occurred (displayed in your local time format).</li> <li>Event Type: The type of event (e.g., \"Client Connection\" or \"Client Disconnection\").</li> <li>Username: The username used for authentication.</li> <li>Client ID: A unique identifier for the client.</li> <li>Protocol: The MQTT protocol level used by the client.</li> <li>Details: Additional information about the event.</li> <li>Status: Visual indicator showing connection status (green check for connected, red stop for disconnected).</li> </ul>"},{"location":"monitoring/connect-clients/#client-management","title":"Client Management","text":"<p>The interface provides direct actions for managing client access:</p> <ul> <li>Disable Client: For connected clients, you can immediately disable their access with a single click.</li> <li>Enable Client: For disabled clients, you can restore their access privileges.</li> <li>Notification System: Receive immediate feedback on actions with color-coded notifications.</li> </ul>"},{"location":"monitoring/connect-clients/#how-to-use","title":"How to Use","text":""},{"location":"monitoring/connect-clients/#monitoring-clients","title":"Monitoring Clients","text":"<ol> <li>Navigate to the Connect Clients page in the Monitoring section.</li> <li>Review the table of recent events to see client connection activity.</li> <li>Use the search bar to filter for specific clients, usernames, or event types.</li> <li>Click on a client ID to view more detailed information about that client.</li> </ol>"},{"location":"monitoring/connect-clients/#managing-client-access","title":"Managing Client Access","text":"<ol> <li>To disable a client's access:</li> <li>Locate the client in the table</li> <li>Click the \"Disable\" button in the Actions column</li> <li> <p>A confirmation notification will appear when the action is complete</p> </li> <li> <p>To enable a previously disabled client:</p> </li> <li>Find the disabled client in the table</li> <li>Click the \"Enable\" button in the Actions column</li> <li>A confirmation notification will appear when the action is complete</li> </ol>"},{"location":"monitoring/connect-clients/#related-documentation","title":"Related Documentation","text":"<ul> <li>MQTT Broker Configuration</li> <li>User Authentication</li> <li>Broker Logs </li> </ul>"},{"location":"mqtt/broker-configuration/","title":"Broker Configuration","text":"<p>The Broker Configuration interface in BunkerM provides a user-friendly way to configure the Mosquitto MQTT broker without having to edit configuration files manually. This powerful feature allows you to customize various aspects of your broker's behavior to suit your specific requirements.</p> <p></p>"},{"location":"mqtt/broker-configuration/#configuration-overview","title":"Configuration Overview","text":"<p>The broker configuration page is organized into expandable sections, each containing related settings:</p> <ul> <li>General Configuration: Basic broker settings</li> <li>Security: Authentication and access control settings</li> <li>Performance: Settings that affect broker performance</li> <li>Persistence: Message storage and retention settings</li> <li>Logging: Log level and format settings</li> <li>Advanced: Additional specialized settings</li> </ul>"},{"location":"mqtt/broker-configuration/#general-configuration","title":"General Configuration","text":"<p>This section contains fundamental broker settings:</p>"},{"location":"mqtt/broker-configuration/#connection-settings","title":"Connection Settings","text":"<ul> <li>Max Connections: Maximum number of client connections allowed (-1 for unlimited)</li> <li>Max Inflight Messages: Maximum number of QoS 1 and 2 messages in flight per client</li> <li>Max Queued Messages: Maximum number of QoS 1 and 2 messages that can be queued for a client</li> <li>Allow Anonymous: Whether to allow clients to connect without credentials (not recommended for production)</li> </ul>"},{"location":"mqtt/broker-configuration/#protocol-settings","title":"Protocol Settings","text":"<ul> <li>Protocol Version: MQTT protocol versions to support (3.1, 3.1.1, 5.0)</li> <li>Allow Zero Length Client ID: Whether to allow clients to connect with an empty client ID</li> </ul>"},{"location":"mqtt/broker-configuration/#security-configuration","title":"Security Configuration","text":"<p>This section contains settings related to security:</p>"},{"location":"mqtt/broker-configuration/#tlsssl-settings","title":"TLS/SSL Settings","text":"<ul> <li>Use TLS/SSL: Enable or disable TLS/SSL encryption</li> <li>Certificate Path: Path to the server certificate file</li> <li>Key Path: Path to the server private key file</li> <li>CA Certificate: Path to the Certificate Authority certificate file</li> <li>Require Certificate: Whether to require clients to provide a certificate</li> <li>Use PSK: Whether to use pre-shared keys for authentication</li> </ul>"},{"location":"mqtt/broker-configuration/#authentication","title":"Authentication","text":"<ul> <li>Password File Path: Path to the password file (when not using dynamic security)</li> <li>Allow Anonymous: Whether to allow unauthenticated connections</li> <li>Use Dynamic Security: Whether to use the dynamic security plugin (enabled by default in BunkerM)</li> </ul>"},{"location":"mqtt/broker-configuration/#performance-configuration","title":"Performance Configuration","text":"<p>This section contains settings that affect broker performance:</p>"},{"location":"mqtt/broker-configuration/#resource-limits","title":"Resource Limits","text":"<ul> <li>Max Connections: Maximum number of concurrent client connections</li> <li>Max QoS 0 Messages In-flight: Maximum number of QoS 0 messages being processed simultaneously</li> <li>Max QoS 1/2 Messages In-flight: Maximum number of QoS 1/2 messages being processed simultaneously</li> <li>Memory Limit: Maximum memory usage for the broker (in MB)</li> </ul>"},{"location":"mqtt/broker-configuration/#message-size-limits","title":"Message Size Limits","text":"<ul> <li>Max Packet Size: Maximum size of MQTT packets in bytes</li> <li>Max Payload Size: Maximum size of message payloads in bytes</li> </ul>"},{"location":"mqtt/broker-configuration/#persistence-configuration","title":"Persistence Configuration","text":"<p>This section contains settings related to message storage:</p>"},{"location":"mqtt/broker-configuration/#persistence-settings","title":"Persistence Settings","text":"<ul> <li>Persistence Enabled: Whether to store messages and subscriptions to disk</li> <li>Persistence Location: Directory where persistence files are stored</li> <li>Autosave Interval: How often to save persistence data (in seconds)</li> </ul>"},{"location":"mqtt/broker-configuration/#retained-messages","title":"Retained Messages","text":"<ul> <li>Retain Available: Whether to allow retained messages</li> <li>Retained Message Expiry: Whether retained messages should expire</li> <li>Retained Message Expiry Interval: How long retained messages should be kept (in seconds)</li> </ul>"},{"location":"mqtt/broker-configuration/#logging-configuration","title":"Logging Configuration","text":"<p>This section contains settings related to logging:</p>"},{"location":"mqtt/broker-configuration/#log-settings","title":"Log Settings","text":"<ul> <li>Log Type: Where to send logs (stdout, stderr, file)</li> <li>Log Destination: Path to the log file (if log type is file)</li> <li>Log Level: Detail level of logs (none, error, warning, notice, information, debug)</li> <li>Log Timestamp: Whether to include timestamps in log messages</li> <li>Log Timestamp Format: Format of timestamps in logs</li> </ul>"},{"location":"mqtt/broker-configuration/#advanced-configuration","title":"Advanced Configuration","text":"<p>This section contains additional specialized settings:</p>"},{"location":"mqtt/broker-configuration/#bridge-settings","title":"Bridge Settings","text":"<ul> <li>Bridge Support: Whether to enable MQTT bridge functionality</li> <li>Bridge Protocol Version: MQTT protocol version to use for bridges</li> </ul>"},{"location":"mqtt/broker-configuration/#websockets","title":"WebSockets","text":"<ul> <li>WebSockets Enabled: Whether to enable WebSocket support</li> <li>WebSockets Port: Port to use for WebSocket connections</li> <li>WebSockets TLS Port: Port to use for secure WebSocket connections</li> </ul>"},{"location":"mqtt/broker-configuration/#applying-configuration-changes","title":"Applying Configuration Changes","text":"<p>After making changes to the broker configuration:</p> <ol> <li>Review your changes carefully</li> <li>Click the Save Configuration button at the bottom of the page</li> <li>Confirm that you want to apply the changes</li> <li>The broker will be restarted to apply the new configuration</li> </ol> <p>Warning</p> <p>Restarting the broker will temporarily disconnect all clients. Plan configuration changes during maintenance windows for production environments.</p>"},{"location":"mqtt/broker-configuration/#configuration-backup","title":"Configuration Backup","text":"<p>It's recommended to back up your broker configuration before making significant changes:</p> <ol> <li>Navigate to MQTT Management &gt; Import/export ACL</li> <li>Click Export ACL to download your current configuration</li> <li>Store this backup in a safe location</li> </ol>"},{"location":"mqtt/broker-configuration/#best-practices","title":"Best Practices","text":""},{"location":"mqtt/broker-configuration/#security","title":"Security","text":"<ul> <li>Disable anonymous access in production environments</li> <li>Use TLS/SSL encryption for all connections</li> <li>Regularly rotate certificates and keys</li> <li>Set appropriate access controls using roles and ACLs</li> </ul>"},{"location":"mqtt/broker-configuration/#performance","title":"Performance","text":"<ul> <li>Set reasonable limits for message size and queue depth</li> <li>Monitor broker performance and adjust settings as needed</li> <li>Consider your hardware capabilities when configuring limits</li> </ul>"},{"location":"mqtt/broker-configuration/#persistence","title":"Persistence","text":"<ul> <li>Enable persistence for production environments</li> <li>Ensure sufficient disk space for persistence files</li> <li>Set an appropriate autosave interval (balance between data safety and performance)</li> </ul>"},{"location":"mqtt/broker-configuration/#related-documentation","title":"Related Documentation","text":"<ul> <li>Client Management - Managing MQTT client accounts</li> <li>Role Management - Configuring access control</li> <li>Broker Logs - Monitoring broker activity</li> <li>Troubleshooting - Solving common issues </li> </ul>"},{"location":"mqtt/client-management/","title":"Client Management","text":"<p>The Client Management interface in BunkerM allows you to create, manage, and control MQTT client accounts. This is where you define which clients can connect to your broker and manage their authentication credentials.</p> <p></p>"},{"location":"mqtt/client-management/#client-overview","title":"Client Overview","text":"<p>The client management page displays a table of all configured MQTT clients with the following information:</p> <ul> <li>Username: The client's username used for authentication</li> <li>Groups: Any groups the client belongs to</li> <li>Roles: Roles assigned to the client (directly or via groups)</li> <li>Status: Whether the client is currently enabled or disabled</li> <li>Actions: Buttons for managing the client</li> </ul>"},{"location":"mqtt/client-management/#adding-a-new-client","title":"Adding a New Client","text":"<p>To add a new MQTT client:</p> <ol> <li>Click the Add client button in the top right corner</li> <li>In the dialog that appears, enter:</li> <li>Username: A unique identifier for the client</li> <li>Password: The client's authentication password</li> <li>Click Save</li> </ol> <p>Note</p> <p>Client usernames must be unique and can only contain alphanumeric characters, hyphens, and underscores.</p>"},{"location":"mqtt/client-management/#managing-existing-clients","title":"Managing Existing Clients","text":"<p>For each client in the list, you can perform several management actions:</p>"},{"location":"mqtt/client-management/#assigning-roles","title":"Assigning Roles","text":"<p>To assign a role directly to a client:</p> <ol> <li>Click the Assign role button for the client</li> <li>In the dialog that appears, select one or more roles from the available roles list</li> <li>Click Save</li> </ol> <p>Roles define what topics the client can publish to and subscribe to. See Role Management for more details.</p>"},{"location":"mqtt/client-management/#assigning-groups","title":"Assigning Groups","text":"<p>To add a client to one or more groups:</p> <ol> <li>Click the Assign group button for the client</li> <li>In the dialog that appears, select one or more groups from the available groups list</li> <li>Click Save</li> </ol> <p>Groups allow you to organize clients and assign roles to multiple clients at once. See Group Management for more details.</p>"},{"location":"mqtt/client-management/#removing-a-client","title":"Removing a Client","text":"<p>To delete a client:</p> <ol> <li>Click the Remove client button for the client</li> <li>Confirm the deletion in the confirmation dialog</li> </ol> <p>Warning</p> <p>Deleting a client is permanent and cannot be undone. The client will immediately lose access to the broker.</p>"},{"location":"mqtt/client-management/#client-authentication","title":"Client Authentication","text":"<p>BunkerM uses username and password authentication for MQTT clients. When a client attempts to connect to the broker, it must provide the credentials you've configured here.</p> <p>Example connection with the Mosquitto client:</p> <pre><code>mosquitto_pub -h localhost -p 1900 -u client_username -P client_password -t test/topic -m \"Hello\"\n</code></pre>"},{"location":"mqtt/client-management/#client-access-control","title":"Client Access Control","text":"<p>Client access to topics is controlled through the role-based access control system:</p> <ol> <li>Direct Role Assignment: Roles assigned directly to a client</li> <li>Group Role Inheritance: Roles inherited from groups the client belongs to</li> </ol> <p>The effective permissions for a client are the combination of all permissions from all assigned roles.</p>"},{"location":"mqtt/client-management/#import-and-export","title":"Import and Export","text":"<p>BunkerM provides functionality to import and export client configurations using the Mosquitto Dynamic Security JSON format.</p>"},{"location":"mqtt/client-management/#importing-clients","title":"Importing Clients","text":"<p>To import clients from a JSON file:</p> <ol> <li>Navigate to MQTT Management &gt; Import/export ACL</li> <li>In the \"Import ACL\" section, click the file input field</li> <li>Select a valid dynamic security JSON file</li> <li>Click Import ACL</li> </ol> <p>The import process will add all clients, roles, and groups defined in the JSON file to your BunkerM instance.</p>"},{"location":"mqtt/client-management/#exporting-clients","title":"Exporting Clients","text":"<p>To export your current client configuration:</p> <ol> <li>Navigate to MQTT Management &gt; Import/export ACL</li> <li>In the \"Export ACL\" section, click Export ACL</li> <li>The system will generate a JSON file containing all clients, roles, and groups</li> <li>Save the file to your local system</li> </ol> <p>The exported file follows the Mosquitto Dynamic Security JSON structure and can be used for backup or to transfer configurations between BunkerM instances.</p> <p>Note</p> <p>For more information about the Mosquitto Dynamic Security JSON format, refer to the official Mosquitto documentation.</p>"},{"location":"mqtt/client-management/#importing-from-mosquitto-password-file","title":"Importing from Mosquitto Password File","text":"<p>If you're migrating from a standard Mosquitto broker, BunkerM allows you to import users from a <code>mosquitto_passwd</code> file:</p> <ol> <li>Navigate to MQTT Management &gt; Import Mosquitto Password File</li> <li>Click the file input field and select your <code>mosquitto_passwd</code> file</li> <li>Click Import Users</li> <li>The system will process the file and display import results</li> </ol> <p>This feature preserves the original password hashes, allowing users to continue using their existing credentials.</p>"},{"location":"mqtt/client-management/#best-practices","title":"Best Practices","text":""},{"location":"mqtt/client-management/#security","title":"Security","text":"<ul> <li>Use strong, unique passwords for each client</li> <li>Regularly rotate client credentials</li> <li>Delete unused clients promptly</li> </ul>"},{"location":"mqtt/client-management/#organization","title":"Organization","text":"<ul> <li>Use a consistent naming convention for clients</li> <li>Group clients by function or department</li> <li>Assign roles based on the principle of least privilege</li> </ul>"},{"location":"mqtt/client-management/#monitoring","title":"Monitoring","text":"<ul> <li>Regularly review the client list for unauthorized or unused clients</li> <li>Check client connection logs to identify unusual patterns</li> <li>Monitor failed authentication attempts</li> </ul>"},{"location":"mqtt/client-management/#related-documentation","title":"Related Documentation","text":"<ul> <li>Role Management - Managing access control roles</li> <li>Group Management - Organizing clients into groups</li> <li>ACL Configuration - Detailed access control configuration</li> <li>Client Logs - Monitoring client activity </li> </ul>"},{"location":"mqtt/role-management/","title":"Role Management","text":"<p>The Role Management interface in BunkerM allows you to define access control rules that determine what MQTT topics clients can publish to and subscribe to. Roles are a key component of BunkerM's security model, enabling fine-grained access control for your MQTT environment.</p> <p></p>"},{"location":"mqtt/role-management/#understanding-roles","title":"Understanding Roles","text":"<p>A role in BunkerM is a collection of access control rules (ACLs) that define:</p> <ul> <li>Which topics a client can publish to</li> <li>Which topics a client can subscribe to</li> <li>Whether access is allowed or denied for each topic pattern</li> </ul> <p>Roles can be assigned directly to clients or to groups of clients, making it easy to manage permissions at scale.</p>"},{"location":"mqtt/role-management/#role-overview","title":"Role Overview","text":"<p>The role management page displays a table of all configured roles with the following information:</p> <ul> <li>Name: The role's unique identifier</li> <li>Description: A brief description of the role's purpose</li> <li>Clients: The number of clients directly assigned this role</li> <li>Groups: The number of groups assigned this role</li> <li>Actions: Buttons for managing the role</li> </ul>"},{"location":"mqtt/role-management/#adding-a-new-role","title":"Adding a New Role","text":"<p>To create a new role:</p> <ol> <li>Click the Add role button in the top right corner</li> <li>In the dialog that appears, enter:</li> <li>Name: A unique identifier for the role</li> <li>Description: (Optional) A description of the role's purpose</li> <li>Click Save</li> <li>You'll be redirected to the ACL management interface for the new role</li> </ol>"},{"location":"mqtt/role-management/#managing-role-permissions","title":"Managing Role Permissions","text":"<p>After creating a role, you'll need to define its permissions:</p>"},{"location":"mqtt/role-management/#viewing-role-details","title":"Viewing Role Details","text":"<p>To view a role's current permissions:</p> <ol> <li>Click the View permissions button for the role</li> <li>A dialog will display all ACL rules associated with the role</li> </ol>"},{"location":"mqtt/role-management/#managing-acl-rules","title":"Managing ACL Rules","text":"<p>To modify a role's permissions:</p> <ol> <li>Click the Manage role button for the role</li> <li>In the ACL management interface, you can:</li> <li>Add new rules: Click \"Add Rule\" to create a new permission</li> <li>Edit existing rules: Modify the topic patterns and permissions</li> <li>Remove rules: Delete rules that are no longer needed</li> </ol> <p>For each ACL rule, you'll define:</p> <ul> <li>Topic Pattern: The MQTT topic pattern this rule applies to (supports wildcards)</li> <li>Permission Type: Whether this is a publish or subscribe permission</li> <li>Access: Whether to allow or deny access to the specified topic</li> </ul>"},{"location":"mqtt/role-management/#topic-pattern-syntax","title":"Topic Pattern Syntax","text":"<p>BunkerM supports standard MQTT wildcard syntax in topic patterns:</p> <ul> <li>Single-level wildcard (<code>+</code>): Matches exactly one topic level</li> <li> <p>Example: <code>sensor/+/temperature</code> matches <code>sensor/kitchen/temperature</code> but not <code>sensor/kitchen/upstairs/temperature</code></p> </li> <li> <p>Multi-level wildcard (<code>#</code>): Matches any number of topic levels</p> </li> <li>Example: <code>sensor/#</code> matches <code>sensor/temperature</code>, <code>sensor/kitchen/temperature</code>, etc.</li> </ul>"},{"location":"mqtt/role-management/#permission-precedence","title":"Permission Precedence","text":"<p>When multiple rules could apply to a topic, BunkerM follows these precedence rules:</p> <ol> <li>More specific rules take precedence over more general rules</li> <li>Deny rules take precedence over allow rules</li> <li>If no rule matches, access is denied by default</li> </ol>"},{"location":"mqtt/role-management/#removing-a-role","title":"Removing a Role","text":"<p>To delete a role:</p> <ol> <li>Click the Remove role button for the role</li> <li>Confirm the deletion in the confirmation dialog</li> </ol> <p>Warning</p> <p>Deleting a role will remove all associated permissions. Clients that were using this role will lose these permissions unless they have other roles assigned.</p>"},{"location":"mqtt/role-management/#role-assignment","title":"Role Assignment","text":"<p>Roles can be assigned in two ways:</p> <ol> <li>Direct assignment to clients: Through the Client Management interface</li> <li>Assignment to groups: Through the Group Management interface</li> </ol>"},{"location":"mqtt/role-management/#best-practices","title":"Best Practices","text":""},{"location":"mqtt/role-management/#security","title":"Security","text":"<ul> <li>Follow the principle of least privilege: give clients only the permissions they need</li> <li>Use specific topic patterns rather than overly broad wildcards</li> <li>Regularly audit role permissions to ensure they remain appropriate</li> </ul>"},{"location":"mqtt/role-management/#organization","title":"Organization","text":"<ul> <li>Create roles based on functional requirements rather than individual clients</li> <li>Use descriptive names and detailed descriptions for roles</li> <li>Document the purpose and scope of each role</li> </ul>"},{"location":"mqtt/role-management/#common-role-patterns","title":"Common Role Patterns","text":"<ul> <li>Read-only role: Allow subscribe to specific topics, deny all publish</li> <li>Write-only role: Allow publish to specific topics, deny all subscribe</li> <li>Admin role: Allow publish and subscribe to all topics</li> <li>Device-specific role: Allow access only to topics related to a specific device</li> </ul>"},{"location":"mqtt/role-management/#related-documentation","title":"Related Documentation","text":"<ul> <li>Client Management - Assigning roles to clients</li> <li>Group Management - Assigning roles to groups</li> <li>ACL Configuration - Detailed access control configuration</li> <li>Dynamic Security - Advanced security features </li> </ul>"},{"location":"ui/dashboard/","title":"Dashboard","text":"<p>The BunkerM dashboard provides a comprehensive overview of your MQTT broker's performance, client connections, and message activity. This centralized view helps you monitor the health and activity of your MQTT environment at a glance.</p> <p></p>"},{"location":"ui/dashboard/#dashboard-components","title":"Dashboard Components","text":"<p>The dashboard is divided into several key sections, each providing specific insights into your MQTT broker's operation.</p>"},{"location":"ui/dashboard/#broker-statistics","title":"Broker Statistics","text":"<p>The top section of the dashboard displays critical broker statistics:</p> <ul> <li>Connected Clients: The number of MQTT clients currently connected to the broker</li> <li>Total Messages: The cumulative count of messages processed by the broker</li> <li>Subscriptions: The total number of active topic subscriptions</li> <li>Retained Messages: The number of messages stored with the retained flag</li> </ul> <p>These metrics provide a quick overview of your broker's current state and usage level.</p>"},{"location":"ui/dashboard/#message-traffic","title":"Message Traffic","text":"<p>The message traffic chart displays message throughput over time, helping you identify patterns and trends in your MQTT traffic:</p> <ul> <li>Messages Received: The number of messages received by the broker</li> <li>Messages Sent: The number of messages sent by the broker to clients</li> <li>Time Period: You can adjust the time period to view data for the last hour, day, week, or month</li> </ul> <p>This visualization helps you understand usage patterns and plan for capacity needs.</p>"},{"location":"ui/dashboard/#byte-transfer-rates","title":"Byte Transfer Rates","text":"<p>The byte transfer chart shows the data volume flowing through your broker:</p> <ul> <li>Bytes Received: The volume of data received by the broker</li> <li>Bytes Sent: The volume of data sent by the broker to clients</li> <li>Time Period: Adjustable time periods for different analysis needs</li> </ul> <p>This information is valuable for bandwidth planning and identifying potential bottlenecks.</p>"},{"location":"ui/dashboard/#recent-mqtt-events","title":"Recent MQTT Events","text":"<p>The recent events section provides a real-time log of MQTT activity:</p> <ul> <li>Client Connections: Shows when clients connect or disconnect</li> <li>Message Activity: Displays publish and subscribe events</li> <li>Timestamp: When each event occurred</li> <li>Client ID: The identifier of the client involved in the event</li> <li>Event Type: The type of event (connect, disconnect, publish, subscribe)</li> <li>Topic: For publish and subscribe events, shows the relevant topic</li> </ul> <p>This live feed helps you monitor client behavior and troubleshoot issues in real-time.</p>"},{"location":"ui/dashboard/#dashboard-controls","title":"Dashboard Controls","text":"<p>The dashboard includes several controls to help you customize your view:</p> <ul> <li>Refresh Button: Manually refresh the dashboard data</li> <li>Auto-Refresh Toggle: Enable or disable automatic data refreshing</li> <li>Time Period Selector: Change the time period for the charts</li> <li>Export Button: Export dashboard data for reporting or analysis</li> </ul>"},{"location":"ui/dashboard/#using-the-dashboard-effectively","title":"Using the Dashboard Effectively","text":""},{"location":"ui/dashboard/#monitoring-broker-health","title":"Monitoring Broker Health","text":"<p>The dashboard is your first stop for checking broker health:</p> <ol> <li>Check the \"Connected Clients\" metric to ensure it aligns with your expectations</li> <li>Monitor the message and byte transfer rates for unusual spikes or drops</li> <li>Watch for unexpected client disconnections in the recent events log</li> </ol>"},{"location":"ui/dashboard/#capacity-planning","title":"Capacity Planning","text":"<p>Use the historical data in the charts to plan for future capacity needs:</p> <ol> <li>Identify peak usage times and patterns</li> <li>Monitor growth trends in message volume and client connections</li> <li>Use this information to determine when you might need to scale your infrastructure</li> </ol>"},{"location":"ui/dashboard/#troubleshooting","title":"Troubleshooting","text":"<p>When issues arise, the dashboard can help identify the source:</p> <ol> <li>Check for sudden changes in connection counts or message rates</li> <li>Look for error events in the recent events log</li> <li>Correlate client connection/disconnection events with reported issues</li> </ol>"},{"location":"ui/dashboard/#performance-optimization","title":"Performance Optimization","text":"<p>Identify opportunities to optimize your MQTT implementation:</p> <ol> <li>Look for clients that connect and disconnect frequently</li> <li>Identify topics with unusually high message volumes</li> <li>Monitor retained message count to ensure it doesn't grow uncontrollably</li> </ol>"},{"location":"ui/dashboard/#related-documentation","title":"Related Documentation","text":"<ul> <li>Broker Logs - For more detailed logging information</li> <li>Client Logs - For client-specific activity logs</li> <li>Performance Metrics - For more detailed performance analysis </li> </ul>"}]}